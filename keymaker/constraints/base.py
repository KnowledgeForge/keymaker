"""Base Constraint interface"""
from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from keymaker.models.base import Model

from keymaker.types import TokenConstraint, TokenIds


class Constraint(ABC):
    @abstractmethod
    def constrain_tokens(self, base_text: str, completion_text: str, model: "Model") -> TokenConstraint:
        """Constrain the token ids that can be sampled from the model's vocabulary.

        Args:
            base_text (str): The text to which the completion_text should be appended.
            completion_text (str): The text completed thus far
                NOTE: could be more than a single token between applications of this method.
                See `validate_partial_generation` implementation if this could cause issues for the constraint.
                Particularly if there are unexpected empty TokenConstraint set warnings.
            model (Model): The language model to be used.

        Returns:
            None: If no restrictions are to be applied and the full vocabulary can be used.
            set: The set of valid token ids that can be sampled.
            str: If the constraint is complete and the str is the finished value, which may not be what was passed as the completion text.
        """

    def validate_partial_generation(
        self,
        base_text: str,
        completion_tokens: TokenIds,
        model: "Model",
        token_constraint: TokenConstraint,
    ) -> Optional[TokenIds]:
        """An optionally implemented method to aid in Prompt completion.
        When a generation chunk contains more than a single token, it is possible
        for the generation to be invalid under a constraint.

        This method will be called on such chunks to return the starting portion that is valid.

        Args:
            base_text (str): The text to which the completion_text should be appended.
            completion_tokens (TokenIds): The token ids generated by the model for this chunk
            model (Model): The language model to be used.
            token_constraint (TokenConstraint): the TokenConstraint that was passed to the Prompt
                being completed to generate the partial completion chunk

        Returns:
            token ids (TokenIds): A portion of the completion that is valid if any.
        """
        if isinstance(token_constraint, set):
            if not token_constraint:
                return []

            valid_tokens = []
            for tok in completion_tokens:
                if tok not in token_constraint:
                    break
                valid_tokens.append(tok)
            return valid_tokens
        if token_constraint is None:
            return completion_tokens
        if isinstance(token_constraint, str):
            raise ValueError(
                f"partial generation validation should not be necessary/used with str token constraints, got `{token_constraint}`.",
            )

    def __or__(self, other):
        from keymaker.constraints.logical import OrConstraint

        return OrConstraint([self, other])

    def __and__(self, other):
        from keymaker.constraints.logical import AndConstraint

        return AndConstraint([self, other])
